#include "imports/stdlib.fc";
#include "imports/op-codes.fc";

;;current_data always defaults to 0, so we can generate different contract addresses based on different values of contract_id
global int contract_id;
global int current_data;

;; Load data from storage to the properties of the contract
() load_data() impure {
  var ds = get_data().begin_parse();
  contract_id = ds~load_uint(32);
  current_data = ds~load_uint(32);
  ds.end_parse();
}

;; Save data to storage from the properties of the contract
() save_data() impure {
  set_data(
    begin_cell()
    .store_uint(contract_id, 32)
    .store_uint(current_data, 32)
    .end_cell()
  );
}

;; The main entry for receiving requests
;; my_balance: How many tons does the current contract have
;; msg_value: How many tons are passed in this call
;; in_msg_full: The entire content of the incoming message
;; in_msg_body: The contents of the body of the message in msg full
() recv_internal(int my_balance,int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }

  load_data();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if(op == op::set_value){
    int new_value = in_msg_body~load_uint(32);
    current_data = new_value;
    save_data();
    return();
  }

  throw(0xffff);
}

int get_current_data() method_id {
  load_data();
  return current_data;
}

int get_contract_id() method_id {
  load_data();
  return contract_id;
}